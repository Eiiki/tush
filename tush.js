/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[5,7],$V2=[1,14],$V3=[1,17],$V4=[11,20],$V5=[1,18],$V6=[8,9,28,29,30,31,32,39,45,57,58,59,61],$V7=[1,22],$V8=[1,37],$V9=[1,47],$Va=[1,41],$Vb=[1,43],$Vc=[1,44],$Vd=[1,45],$Ve=[1,42],$Vf=[1,50],$Vg=[1,38],$Vh=[1,39],$Vi=[1,40],$Vj=[1,49],$Vk=[1,48],$Vl=[1,55],$Vm=[8,9,14,28,29,30,31,32,39,45,57,58,59,61,66,67],$Vn=[1,59],$Vo=[1,60],$Vp=[1,61],$Vq=[1,62],$Vr=[1,63],$Vs=[1,64],$Vt=[1,65],$Vu=[1,66],$Vv=[1,67],$Vw=[1,68],$Vx=[1,69],$Vy=[1,70],$Vz=[1,71],$VA=[1,72],$VB=[11,17,20,40,43,44,45,46,47,48,49,50,51,52,53,54,55,56],$VC=[8,9,18,28,29,30,31,32,39,45,57,58,59,61],$VD=[17,20],$VE=[11,17,20,40,55,56],$VF=[20,40],$VG=[11,17,20,40,43,44,45,49,50,51,52,53,54,55,56],$VH=[11,17,20,40,43,44,45,46,47,49,50,51,52,53,54,55,56],$VI=[11,17,20,40,49,50,51,52,53,54,55,56],$VJ=[14,67],$VK=[1,125],$VL=[14,66,67];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"functions":4,"EOF":5,"fundecl":6,"FUNDECL":7,"NAME":8,"(":9,"optargs":10,")":11,"optdecls":12,"exprs":13,"END":14,"decls":15,"decl":16,"DECLEND":17,"VAR":18,"names":19,",":20,"nameoptval":21,"=":22,"expr":23,"argsnodecl":24,"argswithdecl":25,"argnodecl":26,"argwithdecl":27,"NUMBER":28,"TRUE":29,"FALSE":30,"NULL":31,"STRING":32,"someexpr":33,"ifexpr":34,"whileexpr":35,"optexprs":36,"exprlist":37,"list":38,"[":39,"]":40,"listelements":41,"listelement":42,"+":43,"++":44,"-":45,"*":46,"/":47,"%":48,"<":49,">":50,"<=":51,">=":52,"==":53,"!=":54,"AND":55,"OR":56,"NOT":57,"RETURN":58,"WHILE":59,"body":60,"IF":61,"optelsifs":62,"optelse":63,"elsifs":64,"elsif":65,"ELSIF":66,"ELSE":67,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"FUNDECL",8:"NAME",9:"(",11:")",14:"END",17:"DECLEND",18:"VAR",20:",",22:"=",28:"NUMBER",29:"TRUE",30:"FALSE",31:"NULL",32:"STRING",39:"[",40:"]",43:"+",44:"++",45:"-",46:"*",47:"/",48:"%",49:"<",50:">",51:"<=",52:">=",53:"==",54:"!=",55:"AND",56:"OR",57:"NOT",58:"RETURN",59:"WHILE",61:"IF",66:"ELSIF",67:"ELSE"},
productions_: [0,[3,2],[4,2],[4,1],[6,8],[12,0],[12,1],[15,3],[15,2],[16,2],[19,3],[19,1],[21,1],[21,3],[10,0],[10,1],[10,1],[10,3],[24,3],[24,1],[25,3],[25,1],[26,1],[27,3],[27,3],[27,3],[27,3],[27,3],[13,2],[13,1],[33,2],[33,1],[33,1],[36,0],[36,1],[37,3],[37,1],[38,2],[38,3],[41,3],[41,1],[42,1],[23,3],[23,4],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,1],[23,2],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,3],[35,6],[34,8],[62,0],[62,1],[64,2],[64,1],[65,5],[63,0],[63,2],[60,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

         generateProgram();
      
break;
case 2:


      
break;
case 3:

         
      
break;
case 4:

         var funcName = $$[$0-6];
         //functions are kept as a dictionary objects
         functions[funcName] = {
            args : $$[$0-4],
            decls : $$[$0-2],
            exprs : $$[$0-1]
         };
      
break;
case 5:
  /* Optional declerations are optional */
         this.$ = [];  
      
break;
case 7:

         for(var i = 0; i < $$[$0-1].length; i++){
            $$[$0-2].push($$[$0-1][i]);
         }
         this.$ = $$[$0-2];
      
break;
case 8: case 30:

         this.$ = $$[$0-1];
      
break;
case 9: case 31: case 32:

         this.$ = $$[$0];
      
break;
case 10: case 18: case 20: case 35: case 39:

         $$[$0-2].push($$[$0]);
         this.$ = $$[$0-2];
      
break;
case 11: case 19: case 21: case 29: case 36: case 40:

         this.$ = [$$[$0]];
      
break;
case 12:
 this.$ = {decl: $$[$0], val: null }; 
break;
case 13:
 this.$ = {decl: $$[$0-2], val: $$[$0] }; 
break;
case 14:
  /* Optional arguments are optional */
         this.$ = [];
      
break;
case 15:
 this.$ = { nodecls: $$[$0], decls: [] }; 
break;
case 16:
 this.$ = { nodecls: [], decls: $$[$0] }; 
break;
case 17:
 this.$ = { nodecls: $$[$0-2], decls: $$[$0] }; 
break;
case 22:
 this.$ = { name: $$[$0], val: null }; 
break;
case 23: case 24: case 25: case 26: case 27:
 this.$ = { name: $$[$0-2], val: $$[$0]   }; 
break;
case 28:

         $$[$0-1].push($$[$0]);
         this.$ = $$[$0-1];
      
break;
case 33:
  /* Optional expressions are optional */
         this.$ = [];
      
break;
case 37:
 this.$ = null; 
break;
case 38:
 this.$ = $$[$0-1];   
break;
case 41: case 72: case 74:
 this.$ = $$[$0]; 
break;
case 42:
 this.$ = {type: "STORE",    name: $$[$0-2], val: $$[$0]}; 
break;
case 43:
 this.$ = {type: "CALLFUNC", name: $$[$0-3], exprs: $$[$0-1] }; 
break;
case 44: case 45: case 46: case 47: case 48: case 49: case 51: case 52: case 53: case 54: case 55: case 56:
 this.$ = {type: "CALLOP",   name: $$[$0-1], exprs: [$$[$0-2], $$[$0]] }; 
break;
case 50:
 this.$ = {type: "CALLOP",   name: $$[$0-1], exprs: [$$[$0]] }; 
break;
case 57:
 this.$ = {type: "AND",      exprs: [$$[$0-2], $$[$0]]}; 
break;
case 58:
 this.$ = {type: "OR",       exprs: [$$[$0-2], $$[$0]]}; 
break;
case 59:
 this.$ = {type: "NOT",      val: $$[$0]}; 
break;
case 60:
 this.$ = {type: "FETCH",    name: $$[$0]}; 
break;
case 61:
 this.$ = {type: "RETURN",   val: $$[$0]}; 
break;
case 62: case 63: case 64: case 65: case 66:
 this.$ = {type: "LITERAL",  val: $$[$0]}; 
break;
case 67:
 this.$ = {type: "LIST",     val: $$[$0] }; 
break;
case 68:
 this.$ = {type: "()",       val: $$[$0-1]}; 
break;
case 69:
 this.$ = {type: "WHILE", cond: $$[$0-3], body: $$[$0-1]}; 
break;
case 70:

         var bodies = [$$[$0-3]];
         var conds = [$$[$0-5]];
         var elsebodies = $$[$0-1];
         hasElse = false;

         bodies = bodies.concat($$[$0-2].bodies);
         if(elsebodies.length > 0){
            bodies = bodies.concat($$[$0-1]);
            hasElse = true;
         }
         conds = conds.concat($$[$0-2].conds);
         this.$ = {
            type: "IF",
            conds: conds,
            bodies: bodies,
            hasElse: hasElse
         };
      
break;
case 71:
 this.$ = {bodies: [], conds: []}; 
break;
case 73:

         $$[$0-1].bodies = $$[$0-1].bodies.concat($$[$0].bodies);
         $$[$0-1].conds = $$[$0-1].conds.concat($$[$0].conds);
         this.$ = $$[$0-1];
      
break;
case 75:
 this.$ = {bodies: [$$[$0]], conds: [$$[$0-2]]}; 
break;
case 76:
 this.$ = []; 
break;
case 77:
 this.$ = [$$[$0]]; 
break;
case 78:
 this.$ = {type: "BODY", exprs: $$[$0]}; 
break;
}
},
table: [{3:1,4:2,6:3,7:$V0},{1:[3]},{5:[1,5],6:6,7:$V0},o($V1,[2,3]),{8:[1,7]},{1:[2,1]},o($V1,[2,2]),{9:[1,8]},{8:$V2,10:9,11:[2,14],24:10,25:11,26:12,27:13},{11:[1,15]},{11:[2,15],20:[1,16]},{11:[2,16],20:$V3},o($V4,[2,19]),o($V4,[2,21]),o($V4,[2,22],{22:$V5}),o($V6,[2,5],{12:19,15:20,16:21,18:$V7}),{8:$V2,25:23,26:24,27:13},{8:[1,26],27:25},{28:[1,27],29:[1,28],30:[1,29],31:[1,30],32:[1,31]},{8:$V8,9:$V9,13:32,23:34,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,33:33,34:35,35:36,38:46,39:$Vf,45:$Vg,57:$Vh,58:$Vi,59:$Vj,61:$Vk},o($V6,[2,6],{16:51,18:$V7}),{17:[1,52]},{8:$Vl,19:53,21:54},{11:[2,17],20:$V3},o($V4,[2,18]),o($V4,[2,20]),{22:$V5},o($V4,[2,23]),o($V4,[2,24]),o($V4,[2,25]),o($V4,[2,26]),o($V4,[2,27]),{8:$V8,9:$V9,14:[1,56],23:34,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,33:57,34:35,35:36,38:46,39:$Vf,45:$Vg,57:$Vh,58:$Vi,59:$Vj,61:$Vk},o($Vm,[2,29]),{17:[1,58],43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA},o($Vm,[2,31]),o($Vm,[2,32]),o($VB,[2,60],{9:[1,74],22:[1,73]}),{8:$V8,9:$V9,23:75,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,38:46,39:$Vf,45:$Vg,57:$Vh,58:$Vi},{8:$V8,9:$V9,23:76,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,38:46,39:$Vf,45:$Vg,57:$Vh,58:$Vi},{8:$V8,9:$V9,23:77,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,38:46,39:$Vf,45:$Vg,57:$Vh,58:$Vi},o($VB,[2,62]),o($VB,[2,63]),o($VB,[2,64]),o($VB,[2,65]),o($VB,[2,66]),o($VB,[2,67]),{8:$V8,9:$V9,23:78,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,38:46,39:$Vf,45:$Vg,57:$Vh,58:$Vi},{9:[1,79]},{9:[1,80]},{8:$V8,9:$V9,23:84,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,38:46,39:$Vf,40:[1,81],41:82,42:83,45:$Vg,57:$Vh,58:$Vi},{17:[1,85]},o($VC,[2,8]),{17:[2,9],20:[1,86]},o($VD,[2,11]),o($VD,[2,12],{22:[1,87]}),o($V1,[2,4]),o($Vm,[2,28]),o($Vm,[2,30]),{8:$V8,9:$V9,23:88,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,38:46,39:$Vf,45:$Vg,57:$Vh,58:$Vi},{8:$V8,9:$V9,23:89,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,38:46,39:$Vf,45:$Vg,57:$Vh,58:$Vi},{8:$V8,9:$V9,23:90,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,38:46,39:$Vf,45:$Vg,57:$Vh,58:$Vi},{8:$V8,9:$V9,23:91,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,38:46,39:$Vf,45:$Vg,57:$Vh,58:$Vi},{8:$V8,9:$V9,23:92,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,38:46,39:$Vf,45:$Vg,57:$Vh,58:$Vi},{8:$V8,9:$V9,23:93,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,38:46,39:$Vf,45:$Vg,57:$Vh,58:$Vi},{8:$V8,9:$V9,23:94,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,38:46,39:$Vf,45:$Vg,57:$Vh,58:$Vi},{8:$V8,9:$V9,23:95,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,38:46,39:$Vf,45:$Vg,57:$Vh,58:$Vi},{8:$V8,9:$V9,23:96,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,38:46,39:$Vf,45:$Vg,57:$Vh,58:$Vi},{8:$V8,9:$V9,23:97,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,38:46,39:$Vf,45:$Vg,57:$Vh,58:$Vi},{8:$V8,9:$V9,23:98,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,38:46,39:$Vf,45:$Vg,57:$Vh,58:$Vi},{8:$V8,9:$V9,23:99,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,38:46,39:$Vf,45:$Vg,57:$Vh,58:$Vi},{8:$V8,9:$V9,23:100,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,38:46,39:$Vf,45:$Vg,57:$Vh,58:$Vi},{8:$V8,9:$V9,23:101,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,38:46,39:$Vf,45:$Vg,57:$Vh,58:$Vi},{8:$V8,9:$V9,23:102,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,38:46,39:$Vf,45:$Vg,57:$Vh,58:$Vi},{8:$V8,9:$V9,11:[2,33],23:105,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,36:103,37:104,38:46,39:$Vf,45:$Vg,57:$Vh,58:$Vi},o($VB,[2,50]),o($VE,[2,59],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy}),o([11,17,20,40],[2,61],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA}),{11:[1,106],43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA},{8:$V8,9:$V9,23:107,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,38:46,39:$Vf,45:$Vg,57:$Vh,58:$Vi},{8:$V8,9:$V9,23:108,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,38:46,39:$Vf,45:$Vg,57:$Vh,58:$Vi},o($VB,[2,37]),{20:[1,110],40:[1,109]},o($VF,[2,40]),o($VF,[2,41],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA}),o($VC,[2,7]),{8:$Vl,21:111},{8:$V8,9:$V9,23:112,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,38:46,39:$Vf,45:$Vg,57:$Vh,58:$Vi},o($VG,[2,44],{46:$Vq,47:$Vr,48:$Vs}),o([11,17,20,40,44,49,50,51,52,53,54,55,56],[2,45],{43:$Vn,45:$Vp,46:$Vq,47:$Vr,48:$Vs}),o($VG,[2,46],{46:$Vq,47:$Vr,48:$Vs}),o($VH,[2,47],{48:$Vs}),o($VH,[2,48],{48:$Vs}),o($VH,[2,49],{48:$Vs}),o($VI,[2,51],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs}),o($VI,[2,52],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs}),o($VI,[2,53],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs}),o($VI,[2,54],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs}),o($VI,[2,55],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs}),o($VI,[2,56],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs}),o($VE,[2,57],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy}),o([11,17,20,40,56],[2,58],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz}),o($VI,[2,42],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs}),{11:[1,113]},{11:[2,34],20:[1,114]},o($V4,[2,36],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA}),o($VB,[2,68]),{11:[1,115],43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA},{11:[1,116],43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA},o($VB,[2,38]),{8:$V8,9:$V9,23:84,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,38:46,39:$Vf,42:117,45:$Vg,57:$Vh,58:$Vi},o($VD,[2,10]),o($VD,[2,13],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA}),o($VB,[2,43]),{8:$V8,9:$V9,23:118,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,38:46,39:$Vf,45:$Vg,57:$Vh,58:$Vi},{8:$V8,9:$V9,13:120,23:34,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,33:33,34:35,35:36,38:46,39:$Vf,45:$Vg,57:$Vh,58:$Vi,59:$Vj,60:119,61:$Vk},{8:$V8,9:$V9,13:120,23:34,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,33:33,34:35,35:36,38:46,39:$Vf,45:$Vg,57:$Vh,58:$Vi,59:$Vj,60:121,61:$Vk},o($VF,[2,39]),o($V4,[2,35],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA}),o($VJ,[2,71],{62:122,64:123,65:124,66:$VK}),o($VL,[2,78],{23:34,34:35,35:36,38:46,33:57,8:$V8,9:$V9,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,39:$Vf,45:$Vg,57:$Vh,58:$Vi,59:$Vj,61:$Vk}),{14:[1,126]},{14:[2,76],63:127,67:[1,128]},o($VJ,[2,72],{65:129,66:$VK}),o($VL,[2,74]),{9:[1,130]},o($Vm,[2,69]),{14:[1,131]},{8:$V8,9:$V9,13:120,23:34,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,33:33,34:35,35:36,38:46,39:$Vf,45:$Vg,57:$Vh,58:$Vi,59:$Vj,60:132,61:$Vk},o($VL,[2,73]),{8:$V8,9:$V9,23:133,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,38:46,39:$Vf,45:$Vg,57:$Vh,58:$Vi},o($Vm,[2,70]),{14:[2,77]},{11:[1,134],43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA},{8:$V8,9:$V9,13:120,23:34,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,33:33,34:35,35:36,38:46,39:$Vf,45:$Vg,57:$Vh,58:$Vi,59:$Vj,60:135,61:$Vk},o($VL,[2,75])],
defaultActions: {5:[2,1],132:[2,77]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


//global object containing all the functions
var functions = {};

var programName = "test";
var emit;
var errConstruct;
var errMessage;
if(this.process !== undefined){
   var fs = require('fs');
   var emittedProgram = [];
   emit = function(code){
      emittedProgram.push(code.toString());
   };
   errConstruct = function(code){
      errMessage = code;
   };
   var argv = this.process.argv;
   programName = argv[argv.length - 1].split(".")[0];
} else {
   emit = window.emit;
   errConstruct = window.throwParsingError;
}

var nextLab = 1;
var ID = 0;
var varTable = {};
var hasReturned = false;
var newLab = function(){
   return nextLab++;
};

var newID = function(){
   return ID++;
};

//PreExpr is an object containing the functions needed for the prework of some of the expressions.
//This was implemented due to the tail recursion in the language and als to reduce code..
var preExpr = {
   tushFunc : function(expr){
      var numParams = 0;
      var params = expr.exprs; //parameters sent to function
      var argsIn = functions[expr.name].args; //arguments used in function

      if(argsIn.hasOwnProperty('nodecls')){
         //If tush functions are given wrong number of arguments
         if(params.length < argsIn.nodecls.length){
            errConstruct("#<ArgumentError: Wrong number of arguments calling '"+
                        expr.name+"' ("+params.length+" for "+argsIn.nodecls.length+")>"
                        );
         }
         else if(params.length > argsIn.nodecls.length + argsIn.decls.length){
            errConstruct("#<ArgumentError: Wrong number of arguments calling '"+
                        expr.name+"' ("+params.length+" for "+parseInt(argsIn.nodecls.length+argsIn.decls.length)+")>"
                        );
         }
         else{
            var numArgsWithDecl = argsIn.nodecls.length + argsIn.decls.length - params.length;
            for(var n = 0; n < params.length; n++){
               generateExpr(params[n]);
               if(n+1 !== params.length){
                  emit('(Push)');
               }
               numParams++;
            }
            var i = argsIn.decls.length - numArgsWithDecl;
            while(i !== argsIn.decls.length){
               if(params.length > 0){
                  emit('(Push)');
               }
               emit('(MakeVal '+argsIn.decls[i].val+')');
               i++;
               numParams++;
            }
         }
      }
      return numParams;
   },
   normalFunc : function(expr){
      for(var n = 0; n < expr.exprs.length; n++){
         generateExpr(expr.exprs[n]);
         if(n+1 !== expr.exprs.length)
            emit('(Push)');
      }
   },
   store : function(expr){
      generateExpr(expr.val);
   },
   callop : function(expr){
      for(var n = 0; n < expr.exprs.length; n++){
         generateExpr(expr.exprs[n]);
         if(n+1 !== expr.exprs.length)
            emit('(Push)');
      }
   },
   fetch : function(expr){
      if(isNaN(varTable[expr.name])){
         errConstruct("Variable "+expr.name+" is undefined");
         return true;
      }
      return false;
   },
   list : function(expr){
      if(expr.val === null){
         emit('(MakeVal null)');
      }else{
         for(var n = 0; n < expr.val.length; n++){
            generateExpr(expr.val[n]);
            if(n+1 !== expr.val.length){
               emit('(Push)');
            }
         }
         emit('(List '+expr.val.length+')');
      }
   },
   parenth : function(expr){
      generateExpr(expr.val);
   },
   ifst : function(expr){
      var conds = expr.conds;
      var bodies = expr.bodies;
      var startLabel = newLab();
      var endLabel = newLab();

      for(var n = 0; n < conds.length; n++){
         var nextLab = newLab();
         generateExpr(conds[n]);
         emit('(GoFalse _L'+nextLab+')');
         generateExpr(bodies[n]);
         emit('(Go _L'+endLabel+')');
         emit('_L'+nextLab+':');
      }
      if(expr.hasElse){
         generateExpr(bodies[bodies.length - 1]);
      }else{
         emit('(MakeVal null)');
      }
      emit('_L'+endLabel+':');
   },
   whilest : function(expr){
      var startLab = newLab();
      var nextLab = newLab();

      emit('_L'+startLab+':');
      generateExpr(expr.cond);
      emit('(GoFalse _L'+nextLab+')');
      for(var n = 0; n < expr.body.exprs.length; n++){
         generateExpr(expr.body.exprs[n]);
      }
      emit('(Go _L'+startLab+')');
      emit('_L'+nextLab+':');
   },
   body : function(expr){
      for(var n = 0; n < expr.exprs.length; n++){
         generateExpr(expr.exprs[n]);
      }
   },
   and : function(expr){
      var falseLab = newLab();
      generateExpr(expr.exprs[0]);
      emit('(GoFalse _L'+falseLab+')');
      generateExpr(expr.exprs[1]);
      emit('_L'+falseLab+':');
   },
   or : function(expr){
      var trueLab = newLab();
      generateExpr(expr.exprs[0]);
      emit('(GoTrue _L'+trueLab+')');
      generateExpr(expr.exprs[1]);
      emit('_L'+trueLab+':');
   },
   not : function(expr){
      generateExpr(expr.val);
   }
};

var generateExpr = function(expr){
   var type = expr.type;

   if(!type){
      return;
   }
   else if(type === "CALLFUNC"){
      //If we are dealing with functions from the tush language
      if(functions[expr.name]){
         var numParams = preExpr.tushFunc(expr);
         emit('(Call #"'+expr.name+'[f'+numParams+']" '+numParams+')');
      }else{
         preExpr.normalFunc(expr);
         emit('(Call #"'+expr.name+'[f'+expr.exprs.length+']" '+expr.exprs.length+')');
      }
   }
   else if(type === "STORE"){
      preExpr.store(expr);
      emit('(Store '+varTable[expr.name]+')');
   }
   else if(type === "CALLOP"){
      preExpr.callop(expr);
      emit('(Call #"'+expr.name+'[f'+expr.exprs.length+']" '+expr.exprs.length+')');
   }
   else if(type === "FETCH"){
      var hasError = preExpr.fetch(expr);
      if(hasError) return;
      emit('(Fetch '+varTable[expr.name]+')');
   }
   else if(type === "LITERAL"){
      emit('(MakeVal '+expr.val+')');
   }
   else if(type === "LIST"){
      preExpr.list(expr);
   }
   else if(type === "()"){
      preExpr.parenth(expr);
   }
   else if(type === "IF"){
      preExpr.ifst(expr);
   }
   else if(type === "RETURN"){
      generateExprR(expr);
   }
   else if(type === "WHILE"){
      preExpr.whilest(expr);
   }
   else if(type === "BODY"){
      preExpr.body(expr);
   }
   else if(type === "AND"){
      preExpr.and(expr);
   }
   else if(type === "OR"){
      preExpr.or(expr);
   }
   else if(type === "NOT"){
      preExpr.not(expr);
      emit('(Not)');
   }
   else{
      //This should not happen
      errConstruct("Unexpected type of expression: "+type);
   }
};

var generateExprR = function(expr){
   var type = expr.type;
   hasReturned = true;
   if(!type){
      hasReturned = false;
      return;
   }
   else if(type === "RETURN"){
      var returnExpr = expr.val;
      var retType = returnExpr.type;

      if(retType === "CALLFUNC"){
         //If we are dealing with functions from the tush language
         if(functions[returnExpr.name]){
            var numParams = preExpr.tushFunc(returnExpr);
            emit('(CallR #"'+returnExpr.name+'[f'+numParams+']" '+numParams+')');
         }else{
            preExpr.normalFunc(returnExpr);
            emit('(CallR #"'+returnExpr.name+'[f'+returnExpr.exprs.length+']" '+
               returnExpr.exprs.length+')');
         }
      }
      else if(retType === "STORE"){
         preExpr.store(returnExpr);
         emit('(StoreR '+varTable[returnExpr.name]+')');
      }
      else if(retType === "CALLOP"){
         preExpr.callop(returnExpr);
         emit('(CallR #"'+returnExpr.name+'[f'+returnExpr.exprs.length+']" '+returnExpr.exprs.length+')');
      }
      else if(retType === "FETCH"){
         var hasError = preExpr.fetch(returnExpr);
         if(hasError) return;
         emit('(FetchR '+varTable[returnExpr.name]+')');
      }
      else if(retType === "LITERAL"){
         emit('(MakeValR '+returnExpr.val+')');
      }
      else if(retType === "LIST"){
         preExpr.list(returnExpr);
         hasReturned = false;
      }
      else if(retType === "()"){
         preExpr.parenth(returnExpr);
         hasReturned = false;
      }
      else if(retType === "IF"){
         preExpr.ifst(returnExpr);
         hasReturned = false;
      }
      else if(retType === "RETURN"){
         //no sense in making 'return return something' but we'll keep it here anyway
         generateExprR(returnExpr.val);
      }
      else if(retType === "WHILE"){
         preExpr.whilest(returnExpr);
         hasReturned = false;
      }
      else if(retType === "BODY"){
         preExpr.body(returnExpr);
         hasReturned = false;
      }
      else if(retType === "AND"){
         preExpr.and(returnExpr);
         hasReturned = false
      }
      else if(retType === "OR"){
         preExpr.or(returnExpr);
         hasReturned = false;
      }
      else if(retType === "NOT"){
         preExpr.not(returnExpr);
         emit('(NotR)');
      }
      else{
         //This should not happen
         errConstruct("Unexpected type of expression: "+retType);
      }
   }
   else{
      if(expr.type === "WHILE" || expr.type === "IF"){
         //This should not happen
         errConstruct("Can't call generateExprR function for type "+expr.type);
         return;
      }
      generateExprR({type: "RETURN",   val: expr });
   }
};

var generateDecl = function(decl){
   varTable[decl] = newID();
   emit('(Push)');
};

var generateFunction = function(name, func){
   ID = 0;
   varTable = {};
   var args = func.args;
   var decls = func.decls;
   var exprs = func.exprs;

   var argsLen = 0;
   //If it is a function that takes in arguments
   if(args.hasOwnProperty('nodecls')){
      argsLen += args.nodecls.length + args.decls.length;
   }

   emit('#"'+name+'[f'+argsLen+']"=');
   emit('[');
   //Arguments passed to function
   if(argsLen > 0){
      for(var n = 0; n < args.nodecls.length; n++){
         varTable[args.nodecls[n].name] = newID();
      }
      for(var n = 0; n < args.decls.length; n++){
         varTable[args.decls[n].name] = newID();
      }
   }
   //Declerations made in function
   for(var n = 0; n < decls.length; n++){
      if(decls[n].val === null){
         emit('(MakeVal null)');
      }else{
         generateExpr(decls[n].val);
      }
      generateDecl(decls[n].decl);
   }
   //Expressions in function
   hasReturned = false;
   for(var n = 0; n < exprs.length; n++){
      var expr = exprs[n];
      //Implementation of tail recursion
      if(expr.type === "RETURN"){
         generateExprR(expr);
      }else{
         var lastExpr = n + 1 === exprs.length;
         if(lastExpr && (expr.type === "WHILE" || expr.type === "IF")){
            lastExpr = false;
            hasReturned = false;
         }
         //If we are dealing with the last expression in a function and it's not if or while statement
         //then we use the generateExprR function
         if(lastExpr){
            generateExprR(expr);
         }else{
            generateExpr(expr);
         }
      }
   }
   //if we haven't returned anything from current function. F.x. when function ends with an if/while statement
   if(!hasReturned){
      emit('(Return)');
   }
   emit('];');
};

var generateProgram = function(){
   nextLab = 1;
   emit('"'+programName+'.mexe" = main in');
   emit('!{{');
   for(n in functions){
      var func = functions[n];
      generateFunction(n, func);
   }
   emit('}}*BASIS;');

   if(this.process !== undefined){
      if(!errMessage){
         var programToFile = "";
         for(var n = 0; n < emittedProgram.length; n++){
            programToFile += emittedProgram[n];
            programToFile += "\n";
         }
         fs.writeFile(programName+".mexe", programToFile, function(err) {
            if(err) {
               console.log(err);
            }else{
               console.log("Parsed successfully to "+programName+".mexe");
            }
         }); 
      }else{
         console.log("Parsing unsuccessfull");
         console.log(errMessage);
      }
   }
};

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip comments */ 
break;
case 2:return 18;
break;
case 3:return 7;
break;
case 4:return 59;
break;
case 5:return 61;
break;
case 6:return 66;
break;
case 7:return 67;
break;
case 8:return 14;
break;
case 9:return 17;
break;
case 10:return 58;
break;
case 11:return 29;
break;
case 12:return 30;
break;
case 13:return 31;
break;
case 14:return 54;
break;
case 15:return 57;
break;
case 16:return 57;
break;
case 17:return 56;
break;
case 18:return 56;
break;
case 19:return 55;
break;
case 20:return 55;
break;
case 21:return 51;
break;
case 22:return 52;
break;
case 23:return 49;
break;
case 24:return 50;
break;
case 25:return 53;
break;
case 26:return 44;
break;
case 27:return 46;
break;
case 28:return 47;
break;
case 29:return 45;
break;
case 30:return 43;
break;
case 31:return 48;
break;
case 32:return 22;
break;
case 33:return 9;
break;
case 34:return 11;
break;
case 35:return 39;
break;
case 36:return 40;
break;
case 37:return 20;
break;
case 38:return 32;
break;
case 39:return 28;
break;
case 40:return 8;
break;
case 41:return 5;
break;
case 42:return 'INVALID';
break;
}
},
rules: [/^(?:\s+)/,/^(?:^#.*)/,/^(?:var\b)/,/^(?:def\b)/,/^(?:while\b)/,/^(?:if\b)/,/^(?:elsif\b)/,/^(?:else\b)/,/^(?:end\b)/,/^(?:;)/,/^(?:return\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:!=)/,/^(?:not\b)/,/^(?:!)/,/^(?:or\b)/,/^(?:\|\|)/,/^(?:and\b)/,/^(?:&&)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:\+\+)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:%)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:"[^\"]*")/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[A-Za-z]+([0-9A-Za-z])*\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}